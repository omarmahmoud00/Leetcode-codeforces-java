import java.util.Stack;

class Solution {
    public void rotate(int[] nums, int k) {
        if(k==0) return;
        int size = nums.length;
        int steps = k%size;
        int intPart = (int) k/size;

        if(steps==0 && (intPart%2==0)) return;

        Stack<Integer> stack = new Stack<>();

        if(steps==0 && (intPart % 2==1)){
            stack = this.fillstack(stack, nums, k, size);
            this.fullRotate(stack, nums, k);
            return;
        }

        if(intPart % 2==0){
            stack = this.fillstack(stack, nums, steps, size);
            this.rotate(stack, nums, steps, size);
        } else {
            stack = this.fillstack(stack, nums, k, size);
            this.fullRotate(stack, nums, k);
            stack = this.fillstack(stack, nums, steps, size);
            this.rotate(stack, nums, steps, size);
        }
    }

    private static Stack<Integer> fillstack(Stack<Integer> stack, int[] nums, int k, int size) {
        int i = size - 1;
        while(k > 0&&i>=0){
            stack.push(nums[i]);
            i--;
            k--;
        }
        return stack;
    } 

    private static void fullRotate(Stack<Integer> stack, int[] nums, int k) {
         
        for(int i = 0; i < k; i++){
            if(!stack.isEmpty()){
                nums[i] = stack.pop();
            }
        }



    } 

    private static void rotate(Stack<Integer> stack, int[] nums, int k, int size) {
        int lastIndex = size - k - 1;
        for(int i = lastIndex; i >= 0; i--){
            nums[i + k] = nums[i];
        }
        
        for(int i = 0; i < k; i++){
        if(!stack.isEmpty()){
            nums[i] = stack.pop();
        }
    }

    }
}
